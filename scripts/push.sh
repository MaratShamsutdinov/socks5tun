#!/usr/bin/env bash
set -euo pipefail
cd "$(dirname "$0")/.."

BRANCH="main"
USER_MSG="${1:-auto}"

AUTO_FREEZE=${AUTO_FREEZE:-1}   # 1 = –æ–±–Ω–æ–≤–ª—è—Ç—å requirements.txt –∏–∑ .venv, 0 = –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å

# ---- –≤—ã–±—Ä–∞—Ç—å python ----
pick_python() {
  if [[ -x ".venv/bin/python" ]]; then echo ".venv/bin/python"; return; fi
  command -v python3 >/dev/null 2>&1 && { echo python3; return; }
  command -v python  >/dev/null 2>&1 && { echo python;  return; }
  echo python3
}
PY="$(pick_python)"

# ---- upstream + fetch/pull --rebase ----
git fetch origin || true
git rev-parse --abbrev-ref --symbolic-full-name "@{u}" >/dev/null 2>&1 || git branch -u "origin/${BRANCH}" "${BRANCH}" || true
if git rev-list --left-right --count "HEAD...origin/${BRANCH}" >/dev/null 2>&1; then
  behind=$(git rev-list --left-right --count "HEAD...origin/${BRANCH}" | awk '{print $2}')
  [[ "${behind:-0}" -gt 0 ]] && git pull --rebase origin "${BRANCH}"
fi

# ---- –≤—ã—è—Å–Ω—è–µ–º, –º–µ–Ω—è–ª—Å—è –ª–∏ requirements.txt –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ origin/BRANCH ----
req_changed=0
if [[ -f requirements.txt ]]; then
  base="$(git merge-base HEAD "origin/${BRANCH}" 2>/dev/null || true)"
  if [[ -z "$base" ]]; then
    req_changed=1
  elif git diff --name-only "$base" HEAD | grep -qx "requirements.txt"; then
    req_changed=1
  fi
fi

# ---- AUTO_FREEZE: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏–º requirements.txt –∏–∑ .venv ----
req_updated_by_freeze=0
if [[ "$AUTO_FREEZE" = "1" ]]; then
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º pip
  if [[ -n "${VIRTUAL_ENV:-}" && -x "$VIRTUAL_ENV/bin/pip" ]]; then
    PIP="$VIRTUAL_ENV/bin/pip"
  elif [[ -x ".venv/bin/pip" ]]; then
    PIP=".venv/bin/pip"
  elif [[ -x "/opt/venv-pyroute/bin/pip" ]]; then
    PIP="/opt/venv-pyroute/bin/pip"
  else
    PIP="$PY -m pip"
  fi

  tmp_req="$(mktemp)"
  # shellcheck disable=SC2086
  $PIP freeze | sed '/^pkg-resources==/d' > "$tmp_req"

  if [[ ! -f requirements.txt ]] || ! diff -q "$tmp_req" requirements.txt >/dev/null 2>&1; then
    echo "üìÑ Updating requirements.txt from env via: $PIP"
    mv "$tmp_req" requirements.txt
    req_updated_by_freeze=1
  else
    rm -f "$tmp_req"
  fi
fi

# ---- –µ—Å–ª–∏ requirements –∏–∑–º–µ–Ω–∏–ª—Å—è (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –ø–æ—Å–ª–µ freeze) ‚Äî —Å—Ç–∞–≤–∏–º deps ----
if [[ -f requirements.txt && ( "$req_changed" -eq 1 || "$req_updated_by_freeze" -eq 1 ) ]]; then
  echo "üì¶ Installing deps with $($PY -c 'import sys; print(sys.executable)')"
  $PY -m pip install --upgrade pip
  $PY -m pip install -r requirements.txt
else
  echo "requirements.txt unchanged ‚Äî skip deps install."
fi

# ---- –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ----
git add -A

# –Ω–µ—Ç staged-–∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –≤—ã—Ö–æ–¥–∏–º
if git diff --cached --quiet; then
  echo "Nothing to commit."
  # –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—à–∏—Ç—å, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
else
  # —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  stat_line="$(git diff --cached --name-status | awk '{c[$1]++} END{for (k in c) printf "%s:%d ", k, c[k]}' | sed 's/ $//')"
  [[ -z "$stat_line" ]] && stat_line="A:0 M:0 D:0"
  ins_del="$(git diff --cached --numstat | awk '{ins+=$1; del+=$2} END{printf "+%d/-%d", ins?ins:0, del?del:0}')"
  mapfile -t files < <(git diff --cached --name-only)
  total=${#files[@]}; show=$(( total<10 ? total : 10 ))
  files_list="$(printf '%s, ' "${files[@]:0:show}")"; files_list="${files_list%, }"
  more=$(( total - show )); [[ $more -gt 0 ]] && files_list="$files_list ‚Ä¶(+${more} more)"
  ts="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
  MSG="${USER_MSG}: ${ts} | ${total} file(s) | ${stat_line} | ${ins_del} | ${files_list}"
  git commit -m "$MSG"
fi

# ---- –ø—É—à–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –≤–ø–µ—Ä–µ–¥–∏ origin ----
ahead=0
if git rev-list --left-right --count "HEAD...origin/${BRANCH}" >/dev/null 2>&1; then
  ahead=$(git rev-list --left-right --count "HEAD...origin/${BRANCH}" | awk '{print $1}')
fi
if [[ "${ahead:-0}" -gt 0 ]]; then
  git push origin "${BRANCH}"
  echo "Pushed to origin/${BRANCH}."
else
  echo "Nothing to push ‚Äî local == remote."
fi
