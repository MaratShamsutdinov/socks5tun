#!/bin/bash
set -euo pipefail

PROJECT_DIR="/opt/socks5tun"
VENV_PYTHON="/opt/venv-pyroute/bin/python"
VENV_PIP="/opt/venv-pyroute/bin/pip"
CONFIG_DIR="/etc/socks5tun"
CONFIG_FILE="config_prod.json"
SERVICE_NAME="socks5tun"
SCRIPTS_DIR="$PROJECT_DIR/scripts"
NAT6_SCRIPT="$SCRIPTS_DIR/nat6_setup.sh"

# --- юнит и опции генерации ---
UNIT_PATH="/etc/systemd/system/${SERVICE_NAME}.service"
DROPIN_DIR="/etc/systemd/system/${SERVICE_NAME}.service.d"
VENV_BIN="$VENV_PYTHON"
WORKDIR="$PROJECT_DIR"
CONFIG="$CONFIG_DIR/$CONFIG_FILE"
WANT_STUNNEL="yes"         # "yes"|"no" — если stunnel обязателен
WANT_IPV4_FORWARD="no"     # "yes"|"no" — если надо всегда включать ip_forward

log() { echo "[update] $*"; }

cd "$PROJECT_DIR"

log "Building wheel…"
$VENV_PYTHON -m build --wheel --outdir dist/

log "Installing latest wheel…"
LATEST_WHEEL=$(ls -1t dist/*.whl | head -n1)
$VENV_PIP install --upgrade "$LATEST_WHEEL"

# (опц.) чистим старые колёса, оставляем 3 последних
ls -1t dist/*.whl | tail -n +4 | xargs -r rm -f

log "Syncing config…"
mkdir -p "$CONFIG_DIR"
if [ -f "$CONFIG_DIR/$CONFIG_FILE" ]; then
  cp -a "$CONFIG_DIR/$CONFIG_FILE" "$CONFIG_DIR/$CONFIG_FILE.bak.$(date +%F_%H%M%S)"
fi
cp -f "$PROJECT_DIR/$CONFIG_FILE" "$CONFIG_DIR/$CONFIG_FILE"

# --------- Генерация nat6_setup.sh из конфига ---------
log "Generating NAT6 script from config…"
mkdir -p "$SCRIPTS_DIR"

PREFIX6_DEFAULT="fd00:0:0:8::/64"
if command -v jq >/dev/null 2>&1; then
  PREFIX6=$(jq -r '.tun.prefix6 // empty' "$CONFIG_DIR/$CONFIG_FILE")
  WAN_IF=$(jq -r '.nat.out_iface // empty' "$CONFIG_DIR/$CONFIG_FILE")
else
  log "jq not found; using defaults/fallback autodetect"
  PREFIX6=""
  WAN_IF=""
fi

[ -z "${PREFIX6:-}" ] && PREFIX6="$PREFIX6_DEFAULT"
if [ -z "${WAN_IF:-}" ]; then
  # автоопределение: сначала дефолтный v6 маршрут, затем v4, затем eth0
  WAN_IF=$(ip -o -6 route show default 2>/dev/null | awk '{print $5}' | head -1 || true)
  [ -z "$WAN_IF" ] && WAN_IF=$(ip -o route show default 2>/dev/null | awk '{print $5}' | head -1 || true)
  [ -z "$WAN_IF" ] && WAN_IF="eth0"
fi

cat >"$NAT6_SCRIPT" <<EOF
#!/bin/sh
set -e

# Autogenerated by update_socks5tun.sh — do not edit manually.
PREFIX6="$PREFIX6"
WAN_IF="$WAN_IF"

echo "[nat6_setup] prefix6=\$PREFIX6 wan_if=\$WAN_IF"

# 1) IPv6 forwarding: сейчас и персистентно
sysctl -w net.ipv6.conf.all.forwarding=1 >/dev/null || true
if [ -d /etc/sysctl.d ]; then
  echo 'net.ipv6.conf.all.forwarding=1' >/etc/sysctl.d/99-socks5tun-ipv6.conf || true
fi

# 2) nftables или ip6tables (в зависимости от системы)
if command -v nft >/dev/null 2>&1 && nft list tables 2>/dev/null | grep -q ' ip6 nat'; then
  nft list chain ip6 nat POSTROUTING 2>/dev/null | grep -q "ip6 saddr \$PREFIX6 oif \$WAN_IF masquerade" \
    || nft add rule ip6 nat POSTROUTING ip6 saddr \$PREFIX6 oif \$WAN_IF masquerade
  echo "[nat6_setup] nftables rule ensured"
else
  ip6tables -t nat -C POSTROUTING -s "\$PREFIX6" -o "\$WAN_IF" -j MASQUERADE 2>/dev/null \
    || ip6tables -t nat -A POSTROUTING -s "\$PREFIX6" -o "\$WAN_IF" -j MASQUERADE
  if command -v ip6tables-save >/dev/null 2>&1 && [ -d /etc/iptables ]; then
    ip6tables-save > /etc/iptables/rules.v6 || true
  fi
  echo "[nat6_setup] ip6tables rule ensured"
fi

exit 0
EOF

chmod +x "$NAT6_SCRIPT"

# --------- Автогенерация systemd unit (идемпотентно) ---------
log "Rendering systemd unit…"
TMP_UNIT="$(mktemp)"
cat >"$TMP_UNIT" <<EOF
[Unit]
Description=SOCKS5TUN proxy server
Wants=network-online.target
After=network-online.target systemd-networkd-wait-online.service$( [ "$WANT_STUNNEL" = "yes" ] && printf " stunnel.service" )

[Service]
Type=simple
User=root

AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW

ExecStartPre=-/bin/bash $WORKDIR/scripts/nat6_setup.sh
$( [ "$WANT_IPV4_FORWARD" = "yes" ] && echo "ExecStartPre=/bin/sh -c 'sysctl -w net.ipv4.ip_forward=1'" )

ExecStart=$VENV_BIN -m socks5tun.run -c $CONFIG
WorkingDirectory=$WORKDIR

Environment=PYTHONUNBUFFERED=1
LimitNOFILE=65535
TasksMax=8192
Restart=on-failure
RestartSec=5
TimeoutStopSec=10
KillSignal=SIGINT

NoNewPrivileges=yes
PrivateTmp=yes
ProtectSystem=full
ProtectHome=true
ProtectControlGroups=yes
PrivateDevices=no
DeviceAllow=/dev/net/tun rw
RestrictAddressFamilies=AF_INET AF_INET6 AF_NETLINK
ProtectKernelModules=yes
ProtectClock=yes
ProtectHostname=yes
ProtectProc=invisible
LockPersonality=yes
SystemCallFilter=~@mount @swap @clock @module @reboot
MountAPIVFS=yes
MemoryDenyWriteExecute=yes

ReadWritePaths=/proc/sys/net/ipv4/ip_forward /etc/sysctl.d /etc/iptables

[Install]
WantedBy=multi-user.target
EOF

UNIT_CHANGED=0
if [ ! -f "$UNIT_PATH" ] || ! cmp -s "$TMP_UNIT" "$UNIT_PATH"; then
  [ -f "$UNIT_PATH" ] && cp -a "$UNIT_PATH" "${UNIT_PATH}.bak.$(date +%Y%m%d-%H%M%S)"
  install -m 0644 "$TMP_UNIT" "$UNIT_PATH"
  UNIT_CHANGED=1
fi
rm -f "$TMP_UNIT"

# (опц.) Drop-in override для локальных правок (сохранится между обновлениями)
mkdir -p "$DROPIN_DIR"
if [ ! -f "$DROPIN_DIR/override.conf" ]; then
  cat >"$DROPIN_DIR/override.conf" <<'OVR'
[Service]
# Примеры локальных добавок (оставь закомментированными или настрой под себя):
#RuntimeDirectory=socks5tun
#ReadWritePaths=/var/log/socks5tun
OVR
fi

# --------- Перезапуск сервиса ---------
log "Reloading systemd and restarting service…"
systemctl daemon-reload
systemctl enable --now "$SERVICE_NAME" >/dev/null 2>&1 || true
# если юнит изменился — перезапустим в любом случае; если нет — тоже перезапустим для подхвата нового wheel
systemctl restart "$SERVICE_NAME"
systemctl status "$SERVICE_NAME" --no-pager -n 20 || true

log "Done."
